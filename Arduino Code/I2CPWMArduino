#include <Wire.h>
#include <Servo.h>

#define BUFFER_SIZE = 32

int i2cAddress = 0x40;  //can be changed as/if needed

Servo steering;  // create servo object to control a servo
Servo motor;     //Used to control motor via PWM

void setup()
{
  Wire.begin(i2cAddress);       // join i2c bus with address #0x40
  Wire.onReceive(receiveEvent); // register event
  Wire.onRequest(sendData);
  
  //TODO should this be increased to higher data rate, testing to see
  Serial.begin(9600);           // start serial for output

  steering.attach(3);  // attaches the pins to motor and steering objects
  motor.attach(6);
}

int steeringState = 0;  //Value of steering and motor variables
int motorState = 0;

float steeringTimer = 0.0;  //used to determine how much longer to hold current values for steering input and motor speed
float motorTimer = 0.0;

void receiveEvent(int bytes) {
  //updateState = Wire.read();    // read one character from the I2C
  
  
  byte deviceSelected = Wire.read();  //0 is servo, 1 is motor
  byte valueMSB = Wire.read();
  byte valueLSB = Wire.read();
  byte timeMSB = Wire.read();
  byte timeLSB = Wire.read();

  //TODO reconstruct payload here
  //Combine individual bytes to correct values
  int value = (valueMSB<<8) | (valueLSB);
  int timeToHoldMillis = (timeMSB<<8) | (timeLSB);

  //create array containing values
  int payload[] = {deviceSelected, value, timeToHoldMillis};

  if(payload[0] == 0){  //it is a steering update
    steering.write(payload[1]);
    steeringTimer = payload[2];
  }
  else if(payload[0] == 1){ //is a motor update
    motor.write(payload[1]);
    motorTimer = payload[2];
  }
  else{
    //Not a valid device select, log this 
    Serial.println("Invalid device select offered");
  }

  // TODO this needs to be updated to read multiple characters from the I2C bus

}

void loop()
{
  //TODO first step: update timers and act on these if needed

  if(steeringState > 0) {  
    if(steeringState == 2){
        steering.write(90);
        steeringState = 0;    //do I need to have this every time?
    }
    else if(steeringState == 3){    
        steering.write(180);
        steeringState = 0;                    
    }
  }

  //main logic here


}

//TODO Update below function to include Motor related data also
/**
 * Return data to Jetson via I2C wires
 * Used to inform system of variable states
 * 
*/
void sendData(){
    Wire.write(steeringState); //will want to adjust this to send all data we are concerned with
}

//TODO below function needs tweaking to ensure motor arming is correctly done
/**
 * Called only in setup loop
 * Used to arm ESC for motor control
 * 
*/
void armMotor(Servo motorToArm){
  Serial.print("Arming.");
  motorToArm.write(0);
  delay(100);
  motorToArm.write(1224); //A value at which the motor starts turning
  delay(2000);
  motorToArm.write(1024); //A value at which the motor stands still
  delay(3000);
  Serial.println(" Armed!");
}