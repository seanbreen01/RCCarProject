#include <Wire.h>
#include <Servo.h>
#include <ESC.h>    //motor control library

int i2cAddress = 0x40;  //can be changed as/if needed

Servo steering;                  // create servo object to control steering servo
ESC motor (6,1000,2000,500);     //Used to control motor via PWM

void setup()
{
  Wire.begin(i2cAddress);       // join i2c bus with address #0x40
  Wire.onReceive(receiveEvent); // register event
  Wire.onRequest(sendData);
  
  //TODO should this be increased to higher data rate, test to see
  Serial.begin(9600);           // start serial for output

  steering.attach(3);  // attaches the pins to motor and steering objects
  motor.arm();    //setup motor ESC controller for use

  delay(5000);
}

//TODO adjust these
int neutralSteering = 90;  //Value of steering and motor variables when idle
int neutralMotor = 1000;
float neutralDuration = 1000;

float steeringTimer = 0.0;  //used to determine how much longer to hold current values for steering input and motor speed
float steeringTimerBegin = 0.0;
float motorTimer = 0.0;
float motorTimerBegin = 0.0;

/**
 * Method to read bytes from the I2C bus and create an array containing the values to 
 * be sent to the steering servo and motor control ESC
*/
void receiveEvent(int bytes) {
  
  byte nothing   = Wire.read();    //used to clear first 0 sent on bus, not needed for our purposes
  byte deviceMSB = Wire.read();  
  byte deviceLSB = Wire.read();
  byte valueMSB  = Wire.read();
  byte valueLSB  = Wire.read();
  byte timeMSB   = Wire.read();
  byte timeLSB   = Wire.read();

  // For debugging
  // Serial.print("deviceMSB: ");
  // Serial.println(deviceMSB);
  // Serial.print("deviceLSB: ");
  // Serial.println(deviceLSB);
  // Serial.print("valueMSB: ");
  // Serial.println(valueMSB);
  // Serial.print("valueLSB: ");
  // Serial.println(valueLSB);
  // Serial.print("timeMSB: ");
  // Serial.println(timeMSB);
  // Serial.print("timeLSB: ");
  // Serial.println(timeLSB);

  //Reconstruct payload
  //Combine individual bytes to correct values
  int deviceSelected = (deviceMSB<<8) | (deviceLSB);
  int value =           (valueMSB<<8) | (valueLSB);
  int timeToHoldMillis = (timeMSB<<8) | (timeLSB);
  
  if(deviceSelected == 0){  //it is a steering update
    adjustSteering(value, timeToHoldMillis);
  }
  else if(deviceSelected == 1){ //is a motor update
    adjustMotor(value, timeToHoldMillis);
  }
  else{ //Not a valid device select, log this 
    Serial.print("Invalid device select detected, no device addressed: ");
    Serial.println(deviceSelected);
  }

}

void loop()
{
  //first step: update timers and act on these if needed
  currentTime = millis();

  if(motorTimerBegin + motorTimer >= currentTime){
    //out of time on current motor action, return steering to neutral
    adjustMotor(neutralMotor, neutralDuration);

  }
  if(steeringTimerBegin + steeringTimer >= currentTime){
    //out of time on current steering action, need to respond by returning steering to neutral position
    adjustSteering(neutralSteering, neutralDuration);
  }

  //main logic here
  

}

/**
 * Method called whenever adjusting the steering input of RC car
 * Input value from 0 to 180 setting the servo position
 * Input duration is value in millis for how long position should be held
*/
void adjustSteering(int value, int duration){
  //Check input to see if it is beyond allowed limits for servo position
  //Needed to avoid damage to servo itself or RC car
  if(value <= 110 && value >= 60){
    steering.write(value);
    steeringTimer = (float)duration;
    steeringTimerBegin = millis();
  }
  else{//invalid steering value specified
    Serial.print("Invalid steering value decoded, cannot adjust steering servo to position: ");
    Serial.println(value);
  }
  
}

/**
 * Method called whenever adjusting motor input of RC car
 * Input values between 1000 and 2000
 * Input duration is value in millis for how long power should be held
*/
void adjustMotor(int value, int duration){
  //check value input to ensure it is within allowed limits for vehicle
  if(value <= 2000 && value >= 1000){
    motor.speed(value);
    motorTimer = (float)duration;
    motorTimerBegin = milis();
  }
  else{//invalid motor value specified
    Serial.print("Invalid motor value decoded, cannot adjust motor speed to: ");
    Serial.println(value);
  }
}

//TODO Update below function to include Motor related data also
/**
 * Return data to Jetson via I2C wires
 * Used to inform system of variable states
 * 
*/
void sendData(){
    Wire.write(1); //will want to adjust this to send all data we are concerned with
}
